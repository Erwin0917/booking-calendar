{"version":3,"sources":["ui/calendarWrapper/ReservationCalendar.state.ts","appState/appState.ts","assets/icons/arrowIcon.tsx","ui/SelectDate/SelectDate.style.ts","ui/SelectDate/SelectDate.tsx","ui/calendarWrapper/CalendarWrapper.style.ts","ui/SelectDay/SelectDay.style.ts","ui/SelectDay/SelectDay.tsx","ui/SelectHour/SelectHour.style.ts","ui/SelectHour/SelectHour.tsx","ui/calendarWrapper/CalendarWrapper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ReservationCalendarState","makeObservable","this","days","getWeekDaysFromSelectedDay","start","end","length","weekStartDay","currentDate","startOf","i","push","moment","add","observable","Date","locale","action","newDate","Array","isArray","momentDate","getWeekFromDay","firstDayOfNextWeek","computed","label","marker","AppContext","React","createContext","useContext","context","Error","Provider","useAppStateContext","SvgElement","styled","svg","SelectDateWrapper","div","SelectDateHeader","h2","Arrow","props","className","xmlns","viewBox","fill","d","ArrowBack","Button","button","DateRangeWrapper","DateRange","SelectDate","observer","reservationCalendarState","onClick","previousWeek","format","onChange","updateCurrentDate","value","toDate","clearIcon","nextWeek","CalendarContainer","DaysListWrapper","ul","DayItem","li","DayItemWrapper","SelectDay","map","day","toString","HourList","HourItem","SelectHour","CalenderWrapper","App","appState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3944021b.chunk.js","sourcesContent":["import { action, computed, makeObservable, observable } from 'mobx';\nimport moment from 'moment';\nimport 'moment/locale/pl';\nexport interface ListOfDayType {\n    days: Array<moment.Moment>;\n}\n\nexport class ReservationCalendarState {\n    @observable public currentDate: moment.Moment = moment(new Date()).locale('pl');\n\n    public constructor() {\n        makeObservable(this);\n    }\n\n    @action public updateCurrentDate = (newDate: Date | Date[]): void => {\n        if (!Array.isArray(newDate)) {\n            const momentDate = moment(newDate);\n            this.currentDate = momentDate;\n        }\n    }\n\n    @action public nextWeek = (): void => {\n        const { end } = this.getWeekFromDay;\n        const firstDayOfNextWeek = moment(end).add(1,'days');\n\n        this.currentDate = firstDayOfNextWeek;\n    }\n\n    @action public previousWeek = (): void => {\n        const { start } = this.getWeekFromDay;\n        const firstDayOfNextWeek = moment(start).add(-1,'days');\n\n        this.currentDate = firstDayOfNextWeek;\n    }\n\n    @computed public get getWeekFromDay(): {start: moment.Moment, end: moment.Moment} {\n        const { days } = this.getWeekDaysFromSelectedDay;\n\n        const startDay = days[0];\n        const lastDay = days[days.length - 1];\n\n        return {\n            start: startDay,\n            end: lastDay\n        };\n    }\n\n    @computed public get getWeekDaysFromSelectedDay(): ListOfDayType {\n        const weekStartDay = this.currentDate.startOf('isoWeek');\n\n        const days = [];\n        for (let i = 0; i <= 6; i++) {\n            days.push(moment(weekStartDay).add(i, 'days'));\n        }\n\n        return { days };\n    };\n}\n","import { makeObservable } from 'mobx';\nimport { ReservationCalendarState } from 'src/ui/calendarWrapper/ReservationCalendar.state';\nimport React from 'react';\n\nexport class AppState {\n    public readonly reservationCalendarState: ReservationCalendarState;\n\n    public constructor(){\n        //makeObservable(this);\n\n        this.reservationCalendarState = new ReservationCalendarState();\n    };\n\n\n}\n\ninterface CreateContextResult<T> {\n    AppContext: React.Context<T>,\n    useContext: () => T\n}\n\nexport const createContext = <T>(label: string): CreateContextResult<T> => {\n    const marker = {};\n\n    //@ts-expect-error\n    const AppContext = React.createContext<T>(marker);\n\n    const useContext = (): T => {\n        const context = React.useContext(AppContext);\n\n        if (context === marker) {\n            throw Error(`value was read out of context => \"${label}\"`);\n        }\n\n        return context;\n    };\n\n    return {\n        AppContext,\n        useContext\n    };\n};\n\n\nconst { AppContext, useContext } = createContext<AppState>('appState');\n\nexport const Provider = AppContext.Provider;\n\nexport const useAppStateContext = (): AppState => {\n    return useContext();\n};\n","import styled from 'styled-components';\n\nconst SvgElement = styled.svg`\n    height: auto;\n`;\n\ninterface ArrowIconPropsType {\n\tclassName?: string\n}\n\nexport const ArrowIcon = (props: ArrowIconPropsType): JSX.Element => {\n\n    return (\n        <SvgElement  className={props.className} xmlns='http://www.w3.org/2000/svg' viewBox='0 0 42 42' fill='#000'>\n            <path d='M36.1 20.2l-29-20C6.8 0 6.4-0.1 6 0.1 5.7 0.3 5.5 0.6 5.5 1v40c0 0.4 0.2 0.7 0.5 0.9 0.1 0.1 0.3 0.1 0.5 0.1 0.2 0 0.4-0.1 0.6-0.2l29-20c0.3-0.2 0.4-0.5 0.4-0.8S36.3 20.4 36.1 20.2z'/>\n        </SvgElement>\n    );\n};\n","import { ArrowIcon } from 'src/assets/icons/arrowIcon';\nimport styled from 'styled-components';\n\nexport const SelectDateWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n\n    .react-date-picker__inputGroup {\n        display: none;\n    }\n`;\n\nexport const SelectDateHeader = styled.h2`\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n`;\n\nexport const Arrow = styled(ArrowIcon)`\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    width: 15px;\n    fill: #1662c6;\n`;\n\nexport const ArrowBack = styled(Arrow)`\n    transform: translateX(-50%) translateY(-50%) rotate(180deg);\n`;\n\nexport const Button = styled.button`\n    position: relative;\n    background-color: #eef4fd;\n    border: 1px solid #deebf1;\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    margin: 10px;\n    cursor: pointer;\n    outline: 0;\n    transition: 0.2s ease-in-out;\n\n    &:hover {\n        border-color: #1662c6;\n    }\n\n`;\n\nexport const DateRangeWrapper = styled.div`\n    display: flex;\n    align-items: center;\n\n    .react-date-picker__wrapper{\n        border: 0;\n    }\n\n    .react-date-picker__calendar-button{\n    }\n`;\n\nexport const DateRange = styled.div`\n    color: #1662c6;\n`;\n","import React from 'react';\nimport { Arrow, ArrowBack, Button, DateRange, DateRangeWrapper, SelectDateHeader, SelectDateWrapper } from './SelectDate.style';\nimport DatePicker from 'react-date-picker';\nimport { observer  } from 'mobx-react-lite';\nimport { useAppStateContext } from 'src/appState/appState';\n\n\n\nexport const SelectDate = observer((): JSX.Element => {\n    const { reservationCalendarState } = useAppStateContext();\n\n    return (\n        <div>\n            <SelectDateHeader>Wybierz date</SelectDateHeader>\n            <SelectDateWrapper>\n                <DateRangeWrapper>\n                    <Button onClick={reservationCalendarState.previousWeek}><ArrowBack /></Button>\n                    <DateRange>\n                        {reservationCalendarState.getWeekFromDay.start.format('DD MM')} - {reservationCalendarState.getWeekFromDay.end.format('DD MM')}\n                    </DateRange>\n                    <DatePicker\n                        onChange={reservationCalendarState.updateCurrentDate}\n                        value={reservationCalendarState.currentDate.toDate()}\n                        clearIcon={null}\n                        locale='pl-PL'\n                    />\n                    <Button onClick={reservationCalendarState.nextWeek}><Arrow /></Button>\n                </DateRangeWrapper>\n            </SelectDateWrapper>\n        </div>\n    );\n});\n","import styled from 'styled-components';\n\nexport const CalendarContainer = styled.div`\n    width: 70%;\n    min-width: 500px;\n    min-height: 400px;\n    border: 1px solid #bfbfbf;\n    border-radius: 10px;\n    background-color: #f8fbff;\n    position: relative;\n    margin: 50px auto;\n    padding: 15px;\n`;\n","import styled from 'styled-components';\n\nexport const DaysListWrapper = styled.ul`\n    display: flex;\n    justify-content: center;\n`;\n\nexport const DayItem = styled.li`\n    border: 1px solid #deebf1;\n    border-radius: 4px;\n    padding: 5px;\n    background-color: #eef4fd;\n    color: #1662c6;\n    cursor: pointer;\n    transition: 0.2s ease-in-out;\n\n    &:hover {\n        border-color: #1662c6;\n    }\n`;\n\nexport const DayItemWrapper = styled.div`\n    margin: 10px;\n    text-align: center;\n\n    span {\n        font-size: 12px;\n        text-transform: capitalize;\n        color: #93a2a9;\n    }\n`;\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { useAppStateContext } from 'src/appState/appState';\nimport { DayItem, DayItemWrapper, DaysListWrapper } from './SelectDay.style';\n\nexport const SelectDay = observer((): JSX.Element => {\n    const { reservationCalendarState } = useAppStateContext();\n\n    const renderDays = ():React.ReactNodeArray => {\n        const { days } = reservationCalendarState.getWeekDaysFromSelectedDay;\n\n        return days.map( day => {\n\n            return (\n                <DayItemWrapper key={day.toString()}>\n                    <span>\n                        {day.format('MMMM')}\n                    </span>\n                    <DayItem >\n                        {day.format('dd DD')}\n                    </DayItem>\n                </DayItemWrapper>\n            );\n        });\n    };\n\n    return (\n        <div>\n            <DaysListWrapper>\n                {renderDays()}\n            </DaysListWrapper>\n        </div>\n    );\n});\n","import styled from 'styled-components';\n\nexport const HourList = styled.ul`\n    display: flex;\n    flex-direction: column;\n    /*justify-content: center;*/\n    align-items: center;\n`;\n\nexport const HourItem = styled.button`\n    background-color: #eef4fd;\n    min-width: 250px;\n    border: 0;\n    padding: 5px;\n    font-size: 17px;\n    margin: 3px;\n    color: #9a9a9a;\n    outline: 0;\n    cursor: pointer;\n    transition: 0.2s ease-in-out;\n\n    &:hover {\n        background-color: #c3d8f7;\n    }\n`;\n","import React from 'react';\nimport { HourItem, HourList } from './SelectHour.style';\n\nexport const SelectHour = (): JSX.Element => {\n\n    return (\n        <div>\n            <HourList>\n                <li><HourItem>8:00 - 9:00</HourItem></li>\n                <li><HourItem>8:00 - 9:00</HourItem></li>\n                <li><HourItem>8:00 - 9:00</HourItem></li>\n                <li><HourItem>8:00 - 9:00</HourItem></li>\n                <li><HourItem>8:00 - 9:00</HourItem></li>\n                <li><HourItem>8:00 - 9:00</HourItem></li>\n                <li><HourItem>8:00 - 9:00</HourItem></li>\n                <li><HourItem>8:00 - 9:00</HourItem></li>\n                <li><HourItem>8:00 - 9:00</HourItem></li>\n            </HourList>\n        </div>\n    );\n};\n","import { SelectDate } from 'src/ui/SelectDate/SelectDate';\nimport { CalendarContainer } from './CalendarWrapper.style';\nimport { SelectDay } from 'src/ui/SelectDay/SelectDay';\nimport { SelectHour } from 'src/ui/SelectHour/SelectHour';\nimport { observer } from 'mobx-react-lite';\n\nexport const CalenderWrapper = observer((): JSX.Element => {\n    return (\n        <CalendarContainer>\n            <SelectDate/>\n            <SelectDay />\n            <SelectHour />\n        </CalendarContainer>\n    );\n});\n","import React from 'react';\nimport { AppState, Provider } from './appState/appState';\nimport { CalenderWrapper } from './ui/calendarWrapper/CalendarWrapper';\n\ninterface PropsTypes {\n    appState: AppState,\n}\n\nfunction App(props: PropsTypes): JSX.Element {\n    return (\n        <Provider value={props.appState}>\n            <CalenderWrapper />\n        </Provider>\n    );\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { AppState } from './appState/appState';\n\nconst appState = new AppState();\n\nReactDOM.render(\n    <React.StrictMode>\n        <App appState={appState} />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}